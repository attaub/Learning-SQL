#+TITLE: Grouping and Aggregates
#+AUTHOR: ATTA
#+STARTUP: overview
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle  ./code/ch08_grouping_and_aggregates.sql

* Table of contents :toc:
- [[#grouping-concepts][Grouping Concepts]]
- [[#aggregate-functions][Aggregate Functions]]
  - [[#implicit-versus-explicit-groups][Implicit Versus Explicit Groups]]
  - [[#counting-distinct-values][Counting Distinct Values]]
  - [[#using-expressions][Using Expressions]]
  - [[#how-null-values-are-handled][How Null Values are Handled]]
- [[#generating-groups][Generating Groups]]
  - [[#single-column-grouping][Single-Column Grouping]]
  - [[#multicolumn-grouping][Multicolumn Grouping]]
  - [[#grouping-by-expressions][Grouping By Expressions]]
  - [[#generating-rollups][Generating Rollups]]
- [[#group-filter-conditions][Group Filter Conditions]]
- [[#test-your-knowledge][Test Your Knowledge]]

* Grouping Concepts 

#+BEGIN_SRC sql
SELECT open_emp_id FROM account;
#+END_SRC 

#+BEGIN_SRC sql
SELECT open_emp_id FROM account GROUP BY open_emp_id; 
#+END_SRC 

#+BEGIN_SRC sql
SELECT open_emp_id, COUNT(*) how_many FROM account
GROUP BY open_emp_id;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT open_emp_id, COUNT(*) how_many FROM account
WHERE COUNT(*) > 4 GROUP BY open_emp_id; 
#+END_SRC 

#+BEGIN_SRC sql
SELECT open_emp_id, COUNT(*) how_many
 FROM account
 GROUP BY open_emp_id
 HAVING COUNT(*) > 4; 
#+END_SRC 

* Aggregate Functions 

#+BEGIN_SRC sql
SELECT MAX(avail_balance) max_balance,
  MIN(avail_balance) min_balance, AVG(avail_balance) avg_balance,
  SUM(avail_balance) tot_balance, COUNT(*) num_accounts
  FROM account WHERE product_cd = 'CHK';
#+END_SRC 
** Implicit Versus Explicit Groups

#+BEGIN_SRC sql

SELECT product_cd,
    MAX(avail_balance) max_balance, MIN(avail_balance) min_balance,
    AVG(avail_balance) avg_balance, SUM(avail_balance) tot_balance,
    COUNT(*) num_accounts
    FROM account; 

#+END_SRC 

#+BEGIN_SRC sql
SELECT product_cd,
COUNT(*) num_accts
FROM account
GROUP BY product_cd; 
#+END_SRC 

#+BEGIN_SRC sql
SELECT product_cd,
  MAX(avail_balance) max_balance,
  MIN(avail_balance) min_balance,
  AVG(avail_balance) avg_balance,
  SUM(avail_balance) tot_balance,
  COUNT(*) num_accts
  FROM account
  GROUP BY product_cd; 
#+END_SRC 

** Counting Distinct Values

#+BEGIN_SRC sql
SELECT account_id, open_emp_id FROM account ORDER BY open_emp_id; 
SELECT COUNT(open_emp_id) FROM account;
#+END_SRC 

#+BEGIN_SRC sql
SELECT COUNT(DISTINCT open_emp_id) FROM account; 
#+END_SRC 

** Using Expressions
#+BEGIN_SRC sql
SELECT MAX(pending_balance - avail_balance) max_uncleared FROM account; 
#+END_SRC 
** How Null Values are Handled

#+BEGIN_SRC sql

CREATE TABLE number_tbl (val SMALLINT);

INSERT INTO number_tbl VALUES (1);

INSERT INTO number_tbl VALUES (3);

INSERT INTO number_tbl VALUES (5);

SELECT COUNT(*) num_rows,
  COUNT(val) num_vals,
  SUM(val) total,
  MAX(val) max_val,
  AVG(val) avg_val
FROM number_tbl; 

INSERT INTO number_tbl VALUES (NULL);

SELECT COUNT(*) num_rows,
  COUNT(val) num_vals,
  SUM(val) total,
  MAX(val) max_val,
  AVG(val) avg_val
FROM number_tbl;

#+END_SRC 

* Generating Groups 
** Single-Column Grouping
#+BEGIN_SRC sql
SELECT product_cd, SUM(avail_balance) prod_balance
FROM account GROUP BY product_cd; 
#+END_SRC 

** Multicolumn Grouping

#+BEGIN_SRC sql
SELECT product_cd, open_branch_id, SUM(avail_balance) tot_balance FROM account
GROUP BY product_cd, open_branch_id; 
#+END_SRC 

** Grouping By Expressions


#+BEGIN_SRC sql
SELECT EXTRACT(YEAR FROM start_date) year FROM employee;
#+END_SRC 

#+BEGIN_SRC sql
SELECT EXTRACT(YEAR FROM start_date) year,
  COUNT(*) how_many
  FROM employee
  GROUP BY EXTRACT(YEAR FROM start_date);  
#+END_SRC 

** Generating Rollups

#+BEGIN_SRC sql
SELECT product_cd, open_branch_id,
SUM(avail_balance) tot_balance  
FROM account
GROUP BY product_cd, open_branch_id WITH ROLLUP;
#+END_SRC 

#+BEGIN_SRC sql
  SELECT product_cd,
  open_branch_id,
  SUM(avail_balance) tot_balance
  FROM account
  GROUP BY product_cd, open_branch_id WITH CUBE;  
#+END_SRC 

* Group Filter Conditions 
#+BEGIN_SRC sql
SELECT product_cd, SUM(avail_balance) prod_balance
 FROM account
 WHERE status = 'ACTIVE'
 GROUP BY product_cd
 HAVING SUM(avail_balance) >= 10000;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT product_cd, SUM(avail_balance) prod_balance
  FROM account
  WHERE status = 'ACTIVE'
AND SUM(avail_balance) > 10000
  GROUP BY product_cd;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT product_cd, SUM(avail_balance) prod_balance
 FROM account
 WHERE status = 'ACTIVE'
 GROUP BY product_cd
 HAVING MIN(avail_balance) >= 1000
AND MAX(avail_balance) <= 10000; 
#+END_SRC 

* Test Your Knowledge 
1. Construct a query that counts the number of rows in the account table.
2. Modify your query from Exercise 8-1 to count the number of accounts held by each customer. Show the customer ID and the number of accounts for each customer.
3. Modify your query from Exercise 8-2 to include only those customers having at least two accounts.
4. Find the total available balance by product and branch where there is more than one account per product and branch. Order the results by total balance (highest to lowest).

