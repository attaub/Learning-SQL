#+TITLE: Subqueries
#+AUTHOR: ATTA
#+STARTUP: overview
#+OPTIONS: toc:2
#+PROPERTY: header-args :tangle  ./code/ch09_subqueries.sql

* Table of contents :toc:
- [[#what-is-a-subquery][What Is a Subquery?]]
- [[#subquery-types][Subquery Types]]
- [[#noncorrelated-subqueries][Noncorrelated Subqueries]]
  - [[#multiple-row-single-column-subqueries][Multiple-Row, Single-Column Subqueries]]
  - [[#the-in-and-not-in-operators][The in and not in operators]]
  - [[#the-all-operator][The all operator]]
  - [[#the-any-operator][The any operator]]
  - [[#multicolumn-subqueries][Multicolumn Subqueries]]
- [[#correlated-subqueries][Correlated Subqueries]]
  - [[#the-exists-operator][The exists Operator]]
  - [[#data-manipulation-using-correlated-subqueries][Data Manipulation Using Correlated Subqueries]]
- [[#when-to-use-subqueries][When to Use Subqueries]]
  - [[#subqueries-as-data-sources][Subqueries As Data Sources]]
  - [[#data-fabrication][Data fabrication]]
  - [[#task-oriented-subqueries][Task-oriented subqueries]]
  - [[#subqueries-in-filter-conditions][Subqueries in Filter Conditions]]
  - [[#subqueries-as-expression-generators][Subqueries As Expression Generators]]
- [[#subquery-wrap-up][Subquery Wrap-up]]
- [[#test-your-knowledge][Test Your Knowledge]]

* What Is a Subquery? 
Contained within another SQL statement
Always enclosed within parentheses
Usually executed prior to the containing statement

#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id, avail_balance
FROM account
WHERE account_id = (SELECT MAX(account_id) FROM account); 
#+END_SRC 

#+BEGIN_SRC sql
SELECT MAX(account_id) FROM account;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id, avail_balance
FROM account WHERE account_id = 29;  
#+END_SRC 
* Subquery Types 

Noncorrelated subqueries are completely self-contained

Correlated subqueries reference columns from the containing statement 

* Noncorrelated Subqueries 

A scalar subquery ?

#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id, avail_balance FROM account
  WHERE open_emp_id <> (SELECT e.emp_id FROM employee e
  INNER JOIN branch b ON e.assigned_branch_id = b.branch_id
  WHERE e.title = 'Head Teller' AND b.city = 'Woburn');
#+END_SRC 

#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id, avail_balance FROM account
  WHERE open_emp_id <> (SELECT e.emp_id FROM employee e
  INNER JOIN branch b ON e.assigned_branch_id = b.branch_id
  WHERE e.title = 'Teller' AND b.city = 'Woburn'); 
#+END_SRC 

#+BEGIN_SRC sql
SELECT e.emp_id FROM employee e INNER JOIN branch b
ON e.assigned_branch_id = b.branch_id
WHERE e.title = 'Teller' AND b.city = 'Woburn'; 
#+END_SRC 


** Multiple-Row, Single-Column Subqueries
If your subquery returns more than one row, you will not be able to use it on one side of an equality condition, as the previous example demonstrated. However, there are four additional operators that you can use to build conditions with these types of subqueries.

** The in and not in operators

#+BEGIN_SRC sql
SELECT branch_id, name, city
  FROM branch
  WHERE name IN ('Headquarters', 'Quincy Branch'); 
#+END_SRC 

#+BEGIN_SRC sql
SELECT branch_id, name, city FROM branch
WHERE name = 'Headquarters' OR name = 'Quincy Branch';  
#+END_SRC 

#+BEGIN_SRC sql
SELECT emp_id, fname, lname, title FROM employee
WHERE emp_id IN (SELECT superior_emp_id FROM employee);  
#+END_SRC 

#+BEGIN_SRC sql
SELECT superior_emp_id FROM employee;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT emp_id, fname, lname, title
FROM employee
WHERE emp_id NOT IN (SELECT superior_emp_id
FROM employee
WHERE superior_emp_id IS NOT NULL);  
#+END_SRC 

** The all operator
#+BEGIN_SRC sql
SELECT emp_id, fname, lname, title FROM employee
WHERE emp_id <> ALL (SELECT superior_emp_id
FROM employee WHERE superior_emp_id IS NOT NULL);  
#+END_SRC 

#+BEGIN_SRC sql
SELECT emp_id, fname, lname, title
FROM employee
WHERE emp_id NOT IN (1, 2, NULL);
#+END_SRC 

#+BEGIN_SRC sql
SELECT account_id, cust_id, product_cd, avail_balance
FROM account
WHERE avail_balance < ALL (SELECT a.avail_balance
FROM account a INNER JOIN individual i
ON a.cust_id = i.cust_id
WHERE i.fname = 'Frank' AND i.lname = 'Tucker'); 
#+END_SRC 

#+BEGIN_SRC sql
SELECT a.avail_balance
FROM account a INNER JOIN individual i
ON a.cust_id = i.cust_id
WHERE i.fname = 'Frank' AND i.lname = 'Tucker'; 
#+END_SRC 

** The any operator
#+BEGIN_SRC sql
SELECT account_id, cust_id, product_cd, avail_balance
FROM account
WHERE avail_balance > ANY (SELECT a.avail_balance
FROM account a INNER JOIN individual i
ON a.cust_id = i.cust_id
WHERE i.fname = 'Frank' AND i.lname = 'Tucker');  
#+END_SRC 
** Multicolumn Subqueries
#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id
FROM account 
WHERE open_branch_id = (SELECT branch_id
FROM branch
WHERE name = 'Woburn Branch')
AND open_emp_id IN (SELECT emp_id
FROM employee
WHERE title = 'Teller' OR title = 'Head Teller');
#+END_SRC 

#+BEGIN_SRC sql
SELECT account_id, product_cd, cust_id
 FROM account
 WHERE (open_branch_id, open_emp_id) IN
 (SELECT b.branch_id, e.emp_id
FROM branch b INNER JOIN employee e
ON b.branch_id = e.assigned_branch_id
WHERE b.name = 'Woburn Branch'
AND (e.title = 'Teller' OR e.title = 'Head Teller'));  
#+END_SRC 

* Correlated Subqueries 
#+BEGIN_SRC sql
SELECT c.cust_id, c.cust_type_cd, c.city
FROM customer c
WHERE 2 = (SELECT COUNT(*)
FROM account a
WHERE a.cust_id = c.cust_id);  
#+END_SRC 

#+BEGIN_SRC sql
SELECT c.cust_id, c.cust_type_cd, c.city
FROM customer c
WHERE (SELECT SUM(a.avail_balance)
FROM account a
WHERE a.cust_id = c.cust_id)
BETWEEN 5000 AND 10000;  
#+END_SRC 

** The exists Operator
#+BEGIN_SRC sql
SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance
FROM account a
WHERE EXISTS (SELECT 1
FROM transaction t
WHERE t.account_id = a.account_id
AND t.txn_date = '2008-09-22');  
#+END_SRC 

#+BEGIN_SRC sql
SELECT a.account_id, a.product_cd, a.cust_id, a.avail_balance
  FROM account a WHERE EXISTS (SELECT t.txn_id, 'hello', 3.1415927
  FROM transaction t
  WHERE t.account_id = a.account_id AND t.txn_date = '2008-09-22');
#+END_SRC 

#+BEGIN_SRC sql
SELECT a.account_id, a.product_cd, a.cust_id
FROM account a
WHERE NOT EXISTS (SELECT 1
 FROM business b
 WHERE b.cust_id = a.cust_id);  
#+END_SRC 
** Data Manipulation Using Correlated Subqueries
#+BEGIN_SRC sql
UPDATE account a
SET a.last_activity_date =
(SELECT MAX(t.txn_date)
FROM transaction t
WHERE t.account_id = a.account_id);  
#+END_SRC 
#+BEGIN_SRC sql
UPDATE account a
SET a.last_activity_date =
(SELECT MAX(t.txn_date)
FROM transaction t
WHERE t.account_id = a.account_id)
WHERE EXISTS (SELECT 1
FROM transaction t
WHERE t.account_id = a.account_id);  
#+END_SRC 
#+BEGIN_SRC sql
DELETE FROM department
WHERE NOT EXISTS (SELECT 1
FROM employee
WHERE employee.dept_id = department.dept_id);  
#+END_SRC 
#+BEGIN_SRC sql
DELETE FROM department d
WHERE NOT EXISTS (SELECT 1
FROM employee e
WHERE e.dept_id = d.dept_id);  
#+END_SRC 
* When to Use Subqueries 
** Subqueries As Data Sources
#+BEGIN_SRC sql
SELECT d.dept_id, d.name, e_cnt.how_many num_employees
FROM department d INNER JOIN
(SELECT dept_id, COUNT(*) how_many
FROM employee GROUP BY dept_id) e_cnt
ON d.dept_id = e_cnt.dept_id;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT dept_id, COUNT(*) how_many
FROM employee GROUP BY dept_id;  
#+END_SRC 
** Data fabrication
#+BEGIN_SRC sql
SELECT 'Small Fry' name, 0 low_limit, 4999.99 high_limit
UNION ALL
SELECT 'Average Joes' name, 5000 low_limit, 9999.99 high_limit
UNION ALL
SELECT 'Heavy Hitters' name, 10000 low_limit, 9999999.99 high_limit;  
#+END_SRC 

#+BEGIN_SRC sql
   SELECT groups.name, COUNT(*) num_customers
    FROM
    (SELECT SUM(a.avail_balance) cust_balance
    FROM account a INNER JOIN product p
    ON a.product_cd = p.product_cd
    WHERE p.product_type_cd = 'ACCOUNT'
    GROUP BY a.cust_id) cust_rollup
    INNER JOIN
    (SELECT 'Small Fry' name, 0 low_limit, 4999.99 high_limit
    UNION ALL
    SELECT 'Average Joes' name, 5000 low_limit, 9999.99 high_limit
    UNION ALL
    SELECT 'Heavy Hitters' name, 10000 low_limit, 9999999.99 high_limit) groups
    ON cust_rollup.cust_balance
    BETWEEN groups.low_limit AND groups.high_limit  
  GROUP BY groups.name;
  -- bug need to fixed
#+END_SRC 

#+BEGIN_SRC sql
SELECT SUM(a.avail_balance) cust_balance
FROM account a INNER JOIN product p
ON a.product_cd = p.product_cd
WHERE p.product_type_cd = 'ACCOUNT'
GROUP BY a.cust_id;  
#+END_SRC 

** Task-oriented subqueries
#+BEGIN_SRC sql
SELECT p.name product, b.name branch,
CONCAT(e.fname, ' ', e.lname) name,
SUM(a.avail_balance) tot_deposits
FROM account a INNER JOIN employee e
ON a.open_emp_id = e.emp_id
INNER JOIN branch b  
ON a.open_branch_id = b.branch_id
INNER JOIN product p
ON a.product_cd = p.product_cd
WHERE p.product_type_cd = 'ACCOUNT'
GROUP BY p.name, b.name, e.fname, e.lname
ORDER BY 1,2;
#+END_SRC 


#+BEGIN_SRC sql
SELECT product_cd, open_branch_id branch_id, open_emp_id emp_id,
SUM(avail_balance) tot_deposits
 FROM account
 GROUP BY product_cd, open_branch_id, open_emp_id;  
#+END_SRC 


#+BEGIN_SRC sql
SELECT p.name product, b.name branch,  
CONCAT(e.fname, ' ', e.lname) name,
account_groups.tot_deposits
FROM
(SELECT product_cd, open_branch_id branch_id,
open_emp_id emp_id,
SUM(avail_balance) tot_deposits
FROM account
GROUP BY product_cd, open_branch_id, open_emp_id) account_groups
INNER JOIN employee e ON e.emp_id = account_groups.emp_id
INNER JOIN branch b ON b.branch_id = account_groups.branch_id
INNER JOIN product p ON p.product_cd = account_groups.product_cd
WHERE p.product_type_cd = 'ACCOUNT';
#+END_SRC 

** Subqueries in Filter Conditions
#+BEGIN_SRC sql
SELECT open_emp_id, COUNT(*) how_many
FROM account
GROUP BY open_emp_id
HAVING COUNT(*) = (SELECT MAX(emp_cnt.how_many)
FROM (SELECT COUNT(*) how_many
FROM account
GROUP BY open_emp_id) emp_cnt);  
#+END_SRC 

** Subqueries As Expression Generators
#+BEGIN_SRC sql
  
#+END_SRC 

#+BEGIN_SRC sql
SELECT
(SELECT p.name FROM product p
WHERE p.product_cd = a.product_cd
AND p.product_type_cd = 'ACCOUNT') product,
(SELECT b.name FROM branch b
WHERE b.branch_id = a.open_branch_id) branch,
(SELECT CONCAT(e.fname, ' ', e.lname) FROM employee e
WHERE e.emp_id = a.open_emp_id) name,
SUM(a.avail_balance) tot_deposits
FROM account a
GROUP BY a.product_cd, a.open_branch_id, a.open_emp_id
ORDER BY 1,2; 
#+END_SRC 

#+BEGIN_SRC sql
SELECT all_prods.product, all_prods.branch,
all_prods.name, all_prods.tot_deposits
FROM (SELECT (SELECT p.name FROM product p
WHERE p.product_cd = a.product_cd
AND p.product_type_cd = 'ACCOUNT') product,
(SELECT b.name FROM branch b
WHERE b.branch_id = a.open_branch_id) branch,
(SELECT CONCAT(e.fname, ' ', e.lname) FROM employee e
WHERE e.emp_id = a.open_emp_id) name,
SUM(a.avail_balance) tot_deposits
FROM account a
GROUP BY a.product_cd, a.open_branch_id, a.open_emp_id
) all_prods
WHERE all_prods.product IS NOT NULL
ORDER BY 1,2;  
#+END_SRC 

#+BEGIN_SRC sql
SELECT emp.emp_id, CONCAT(emp.fname, ' ', emp.lname) emp_name,
(SELECT CONCAT(boss.fname, ' ', boss.lname)
FROM employee boss
WHERE boss.emp_id = emp.superior_emp_id) boss_name
FROM employee emp
WHERE emp.superior_emp_id IS NOT NULL
ORDER BY (SELECT boss.lname FROM employee boss
WHERE boss.emp_id = emp.superior_emp_id), emp.lname;  
#+END_SRC 

#+BEGIN_SRC sql
INSERT INTO account
(account_id, product_cd, cust_id, open_date, last_activity_date,
status, open_branch_id, open_emp_id, avail_balance, pending_balance)
VALUES (NULL,
(SELECT product_cd FROM product WHERE name = 'savings account'),
(SELECT cust_id FROM customer WHERE fed_id = '555-55-5555'),
'2008-09-25', '2008-09-25', 'ACTIVE',
(SELECT branch_id FROM branch WHERE name = 'Quincy Branch'),
(SELECT emp_id FROM employee WHERE lname = 'Portman' AND fname = 'Frank'),
0, 0); 
#+END_SRC 

* Subquery Wrap-up 


- Return a single column and row, a single column with multiple rows, and multiple columns and rows
- Are independent of the containing statement (noncorrelated subqueries)
- Reference one or more columns from the containing statement (correlated subqueries)
- Are used in conditions that utilize comparison operators as well as the special-purpose operators in, not in, exists, and not exists
- Can be found in select, update, delete, and insert statements
- Generate result sets that can be joined to other tables (or subqueries) in a query
- Can be used to generate values to populate a table or to populate columns in a query's result set
- Are used in the select, from, where, having, and order by clauses of queries

* Test Your Knowledge 

#+BEGIN_SRC sql
  /* */
#+END_SRC 

1. Construct a query against the account table that uses a filter condition with a noncorrelated subquery against the product table to find all loan accounts (product.product_type_cd = 'LOAN'). Retrieve the account ID, product code, customer ID, and available balance.
2. Rework the query from Exercise 9-1 using a correlated subquery against the product table to achieve the same results.
3. Join the following query to the employee table to show the experience level of each employee:
   #+BEGIN_SRC sql
     SELECT 'trainee' name, '2004-01-01' start_dt, '2005-12-31' end_dt
     UNION ALL
     SELECT 'worker' name, '2002-01-01' start_dt, '2003-12-31' end_dt
     UNION ALL
     SELECT 'mentor' name, '2000-01-01' start_dt, '2001-12-31' end_dt
   #+END_SRC
    Give the subquery the alias levels, and include the employee ID, first name, last name, and experience level (levels.name). (Hint: build a join condition using an inequality condition to determine into which level the employee.start_date column falls.)
4. Construct a query against the employee table that retrieves the employee ID, first name, and last name, along with the names of the department and branch to which the employee is assigned. Do not join any tables.
